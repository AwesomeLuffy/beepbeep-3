# -----------------------------------------
# Grammar for BeepBeep 3; edit at your own risk!
#
# This is an EML (Event Manipulation Language) where events are
# associative maps from names to primitive types (number, strings).
# This grammar works in tandem with the EPL (Event Processing
# Language) grammar.
# -----------------------------------------

# Primitive types

<eml_boolean>            := true | false ;
<eml_number>             := ^\d+;
<eml_string>             := ^".*?";
<eml_plain_string>       := ^[a-zA-Z]\w*;

# Constant processor

<eml_constant>           := <eml_number> | <eml_boolean> | <eml_string> ;

# Top-level EML symbols

<eml_expr>               := <eml_constant> | <eml_select> | <eml_feeder> ;

# "SELECT" statement

<eml_select>             := SELECT <eml_att_list> FROM <eml_proc_list> ;

# List of named processors

<eml_proc_def_plain>     := ( <processor> ) | <processor> ;
<eml_proc_def_as>        := ( <processor> ) AS <eml_plain_string>
                            | <processor> AS <eml_plain_string> ;
<eml_proc_def>           := <eml_proc_def_as> | <eml_proc_def_plain> ;
<eml_proc_list>          := <eml_proc_def> , <eml_proc_list> | <eml_proc_def> ;

# List of named attributes

<eml_att_def_plain>      := <eml_att_expr> ;
<eml_att_def_as>         := <eml_att_expr> AS <eml_plain_string> ;
<eml_att_def>            := <eml_att_def_as> | <eml_att_def_plain> ;
<eml_att_list>           := <eml_att_def> , <eml_att_list> | <eml_att_def> ;

# Attribute expressions

<eml_att_expr>           := <eml_att_name> | <eml_att_expr_const> 
                            | <eml_att_expr_binary> ;
<eml_att_name>           := <eml_att_name_q> | <eml_att_name_plain>  ;
<eml_att_name_q>         := <eml_plain_string> . <eml_plain_string> ;
<eml_att_name_plain>     := <eml_plain_string> ;
<eml_att_expr_const>     := <eml_att_expr_number> | <eml_att_expr_string> ;
<eml_att_expr_number>    := <eml_number> ;
<eml_att_expr_string>    := <eml_string> ;

# Binary operators

<eml_att_expr_binary>    := <eml_addition> ;
<eml_addition>           := ( <eml_att_expr> ) + ( <eml_att_expr> ) ;

# Tuple feeder

<eml_feeder>             := THE TUPLES OF <p_stream> ;