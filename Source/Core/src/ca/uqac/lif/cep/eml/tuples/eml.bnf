# -----------------------------------------
# Grammar for BeepBeep 3; edit at your own risk!
#
# This is an EML (Event Manipulation Language) where events are
# associative maps from names to primitive types (number, strings).
# This grammar works in tandem with the EPL (Event Processing
# Language) grammar.
# -----------------------------------------

# Primitive types

<eml_boolean>            := true | false ;
<eml_number>             := ^\d+;
<eml_string>             := ^".*?";
<eml_plain_string>       := ^[\d\w]+;

# Constant processor

<eml_constant>           := <eml_number> | <eml_boolean> | <eml_string> ;

# Top-level EML symbols

<eml_expr>               := <eml_constant> | <eml_select> ;
<eml_expr_q>             := <eml_att_name> ; 

#<eml_expr> | <eml_proc_name> . <eml_att_name>
                            #| <eml_att_name> ;

# "SELECT" statement

<eml_select>             := SELECT <eml_expr_q_list> FROM <eml_proc_list> ;
<eml_expr_q_list>        := <eml_expr_q> , <eml_expr_q_list> | <eml_expr_q> ;
<eml_proc_def_plain>     := <processor> ;
<eml_proc_def_as>        := <processor> AS <eml_plain_string> | <processor> ;
<eml_proc_def>           := <eml_proc_def_as> | <eml_proc_def_plain> ;
<eml_proc_list>          := <eml_proc_def> , <eml_proc_list> | <eml_proc_def> ;

<eml_att_name>           := <eml_plain_string> ;