# -----------------------------------------
# Grammar for BeepBeep 3; edit at your own risk!
#
# This is the EPL part of the language (Event Processing Language).
# Working with BeepBeep 3 also requires the inclusion of at least
# one grammar for the EML (Event Manipulation Language).
# -----------------------------------------

# Top production rule

<S> := <processor> | <processor_def> ;

# Types

<number>             := ^\d+;
<boolean>            := TRUE | FALSE ;
<var_name>           := ^\$[\w\d]+;

# Built-in processors

<processor>          := <p_freeze> | <p_window> | <p_decimate> | <p_prefix> 
                        | <p_print> | <p_combiner> | <userdef_proc> 
                        | <eml_expr> | <var_name> ;
<p_freeze>           := FREEZE <processor> ;
<p_window>           := ( <processor> ) ON A WINDOW OF <number> ;
<p_decimate>         := EVERY <number> <number_suffix> OF ( <processor> ) ;
<number_suffix>      := ST | ND | RD | TH ;
<p_prefix>           := <number> OF ( <processor> ) ;
<p_combiner>         := COMBINE ( <processor> ) WITH <c_combine> ;
<p_print>            := PRINT ( <processor> ) ;


# Definition of a new grammatical object

<processor_def>      := WHEN <symbol_def_list> : <proc_pattern> IS THE <symbol_name> <string_def>
                        | <proc_pattern> IS THE <symbol_name> <string_def> ;
<symbol_def_list>    := <symbol_def> , <symbol_def_list> | <symbol_def> ;
<symbol_def>         := <symbol_var> IS A <symbol_name> ;
<proc_pattern>       := ^.*?(?=IS);
<symbol_var>         := ^@[a-zA-Z][\w_]*;	
<symbol_name>        := ^[a-zA-Z][\w_]*;
<string_def>         := ^.*;

# User-defined processors. Rules get dynamically added here

<userdef_proc>       := gnarfnfar ;